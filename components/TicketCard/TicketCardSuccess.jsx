import { assignEmployee } from '@api/tickets';
import { Person } from '@components/Fields';
import { AnswerTicketForm } from '@components/Forms';
import { MessageStatus } from '@components/MessagesTable';
import { dateLocaleRo } from '@functions';
import { toaster } from '@lib';

const TicketCardSuccess = ({
  _id,
  number,
  name,
  email,
  dateReceived,
  assignedPerson,
  status,
  message,
  response,
  dateResponded,
  refetch,
  setFieldValue,
  previousHelp,
  problem,
  time,
}) => {
  const handleAssign = async (value) => {
    if (value._id !== assignedPerson?._id) {
      try {
        await assignEmployee(_id, value);
        toaster.success('Tichetul a fost alocat cu success');
        refetch();
      } catch (e) {
        toaster.error('Tichetul nu a putut fi alocat');
        // eslint-disable-next-line no-console
        console.log(e);
      }
    }
  };

  return (
    <article className="gap-6 md:grid md:grid-cols-3 flex flex-col-reverse">
      <div className="flex flex-col col-span-2 p-6 bg-white rounded-md border">
        <section className="flex flex-col gap-4">
          <div className="flex gap-2 items-center mb-4">
            <p className="font-medium text-2xl">{problem}</p>
          </div>
          <div>
            <p className="font-medium mb-2 text-lg">De cât timp întâmpinați această problemă?</p>
            <p className="break-keep">{time || 'Fără răspuns'}</p>
          </div>
          <div>
            <p className="font-medium mb-2 text-lg">
              Ați căutat anterior ajutor pentru această problemă? Dacă da, ce tip de ajutor ați
              primit?
            </p>
            <p className="break-keep">{previousHelp || 'Fără răspuns'}</p>
          </div>
          <div>
            <p className="font-medium mb-2 text-lg">Mai multe detalii</p>
            <p className="break-keep">{message}</p>
          </div>
          <p className="font-medium text-lg">Răspunsul tău</p>
        </section>
        <AnswerTicketForm
          id={_id}
          data={{ response }}
          refetch={refetch}
          setFieldValue={setFieldValue}
          status={status}
        />
      </div>
      <div className="flex flex-col rounded-md border h-min bg-white">
        <div className="flex justify-between items-start py-4 border-b border-gray-200 px-4">
          <div className="flex flex-col gap-2 items-center">
            <h2 className="font-medium text-lg">Tichet #{number}</h2>
          </div>
          <MessageStatus status={status} />
        </div>
        <div className="flex flex-col gap-5 border-b border-gray-200 p-4">
          <div className="xl:flex-row flex-col flex xl:items-center xl:gap-5 gap-1 -mb-2">
            <span className="font-medium xl:whitespace-nowrap">Persoană desemnată</span>
          </div>
          <div className="flex items-center gap-2">
            <i className="fa-solid fa-circle-user text-secondary w-4"></i>
            {name}
          </div>
          <div className="flex items-center text-gray-700 gap-2">
            <i className="fa-solid fa-envelope text-secondary w-4"></i>
            {email}
          </div>
          <div className="flex items-center text-gray-700 gap-2">
            <i className="fa-solid fa-calendar-days text-secondary w-4"></i>
            <span>Tichet creat în:</span>
            <span className="font-medium -ml-1">{dateLocaleRo(dateReceived)}</span>
          </div>
          {dateResponded && (
            <div className="flex items-center text-gray-700 gap-2">
              <i className="fa-solid fa-calendar-check text-secondary w-4"></i>
              <span>Răspuns trimis în:</span>
              <span className="font-medium -ml-1">{dateLocaleRo(dateResponded)}</span>
            </div>
          )}
        </div>
        <div className="p-4 w-full lg:w-2/3 ">
          <Person disabled={status === 'closed'} person={assignedPerson} onSelect={handleAssign} />
        </div>
      </div>
    </article>
  );
};

export default TicketCardSuccess;
/* auto-generated by robocode v0.4.3 */
